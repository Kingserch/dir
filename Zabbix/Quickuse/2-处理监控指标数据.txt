1)zabbix 监控项存在于zabbix.items 表中：
mysql> select * from zabbix.items limit 1\G
2)如何添加监控项
监控项可存在模板（Template）中，也可存在主机（Host），模板的作用是可以复用，对需要重复配置的监控项进行抽象归类。
https://www.zabbix.com/documentation/4.0/zh/manual    zabbix中文手册
Configuration(配置)――>Templates （模板）――>Create Templates（创建模板）――>Items（监控项）――>Create Items（创建监控项）
[root@s-30 web]# zabbix_get -s 127.0.0.1 -k   vm.memory.size[pavailable]
43.374499
2.1）在监控项中自定义key
用户自定义参数（UserParameter）仅支持Agent的方式，对于其他方式它是不支持的。
2.2)key自定义的语法格式
在/etc/zabbix/zabbix_agentd.conf中配置参数，写法如下：
UserParameter=key,command
   自定义key的例子
在 /etc/zabbix/zabbix_agentd.conf后面添加如下内容：
UserParameter=get.os.type，head -1  /etc/issue
然后重启zabbix_agentd服务（注意，修改配置后必须重启服务）。
systemctl restart zabbix-agent.service 
运行测试命令，查看key，语句如下：
zabbix_get -s 127.0.0.1 -k get.os.type
CentOS Linux release 7.5.1804 (Core) 
这样写会导致UserParameter烦乱，所以这部分内容我们单独写一个配置文件
vim  /etc/zabbix/zabbix_agentd.conf
Include=/etc/zabbix/zabbix_agentd.conf.d/ 		#大约是在268行添加

除了上面这种写法，还支持参数传递的写法，具体如下：
UserParameter=key[*],command  $1  $2  $3  ……
如果UserParameter包含特殊字符，需要开启参数
vim  /etc/zabbix/zabbix_agentd.conf
UnsafeUserParameters=1 

3)具体操作
1）修改Agent配置文件。
[root@s-30 zabbix_agentd.d]#vim  /etc/zabbix/zabbix_agentd.conf
UnsafeUserParameters=1                 			#处理特殊字符228行
Include=/etc/zabbix/zabbix_agentd.conf.d/*.conf		#子配置文件路径268行
2）修改子配置文件。
[root@s-30 zabbix_agentd.d]#vim  /etc/zabbix/zabbix_agentd.conf.d/vm.memory.size.conf
UserParameter=vm.memory.size，head -1  /etc/issue	#添加这个字段（重启zabbix-agent会生成文件）
[root@s-30 zabbix_agentd.d]# zabbix_get -s 127.0.0.1 -k vm.memory.size
1910075392
[root@s-30 zabbix]# zabbix_agentd -p|grep vm\.memory
vm.memory.size[total]                         [u|1910075392]
网卡监控流量的key
[root@s-30 network-scripts]# zabbix_get  -s  127.0.0.1  -k  net.if.in[ens33,bytes]
43448979			#这个值是网卡的进流量

网卡流量监控的常用key如下：
net.if.out[if,<mode>]
net.if.collisions[if]
net.if.discovery
net.if.out[if,<mode>]
net.if.total[if,<mode>]

与网络连接相关的key
net.tcp.listen[port]
net.tcp.port[<ip>,port]
net.tcp.service[service,<ip>,<port>]
net.tcp.service.perf[service,<ip>,<port>]
net.udp.listen[port]
net.udp.service[service,<ip>,<port>]
net.udp.service.perf[service,<ip>,<port>]
net.dns[<ip>,name,<type>,<timeout>,<count>,<protocol>]
net.dns.record[<ip>,name,<type>,<timeout>,<count>,<protocol>]

监控进程的key
kernel.maxfiles
kernel.maxproc
proc.mem[<name>,<user>,<mode>,<cmdline>]
proc.num[<name>,<user>,<state>,<cmdline>]
proc.cpu.util[<name>,<user>,<type>,<cmdline>,<mode>,<zone>]

监控CPU和内存的key
system.cpu.intr
system.cpu.load[<cpu>,<mode>]
system.cpu.num[<type>]
system.cpu.switches
system.cpu.util[<cpu>,<type>,<mode>]
system.cpu.discovery
vm.memory.size[<mode>]
system.swap.in[<device>,<type>]
system.swap.out[<device>,<type>]
system.swap.size[<device>,<type>]
sensor[device,sensor,<mode>]

磁盘I/O监控的key
vfs.dev.read[<device>,<type>,<mode>]
vfs.dev.write[<device>,<type>,<mode>]
vfs.fs.inode[fs,<mode>]

文件监控的key
vfs.file.cksum[file]
vfs.file.contents[file,<encoding>]
vfs.file.exists[file]
vfs.file.md5sum[file]
vfs.file.regexp[file,regexp,<encoding>,<start line>,<end line>,<output>]
vfs.file.regmatch[file,regexp,<encoding>,<start line>,<end line>]
vfs.file.size[file]
vfs.file.time[file,<mode>]
Vfs.fs.discovery
vfs.fs.size[fs,<mode>]
vfs.dir.count[dir,<regex_incl>,<regex_excl>,<types_incl>,<types_excl>,<max_depth>,<min_size>,<max_size>,<min_age>,<max_age>]

与操作系统相关的key
system.boottime
system.hw.chassis[<info>]
system.hw.cpu[<cpu>,<info>]
system.hw.devices[<type>]
system.hw.macaddr[<interface>,<format>]
system.localtime[<type>]
system.run[command,<mode>]
system.stat[resource,<type>]
system.sw.arch
system.sw.os[<info>]
system.sw.packages[<package>,<manager>,<format>]
system.uname
system.uptime
system.users.num

与Web性能相关的key
web.page.get[host,<path>,<port>]
web.page.perf[host,<path>,<port>]
web.page.regexp[host,<path>,<port>,<regexp>,<length>,<output>]

监控硬件信息的key
sensor[device,sensor,<mode>]

日志监控的key，需要主动模式的支持。
log[file,<regexp>,<encoding>,<maxlines>,<mode>,<output>]
logrt[file_pattern,<regexp>,<encoding>,<maxlines>,<mode>,<output>]
关于更多的Zabbix-Agent Key，请参考官方文档:https://www.zabbix.com/documentation/4.0/manual/config/items/itemtypes/zabbix_agent

Windows监控的key
eventlog[name,<regexp>,<severity>,<source>,<eventid>,<maxlines>,<mode>]
net.if.list
perf_counter[counter,<interval>]
proc_info[<process>,<attribute>,<type>]
service.discovery
service.info[service,<param>]
service_state[*]
services[<type>,<state>,<exclude>]
wmi.get[<namespace>,<query>]
关于key的详细用法，可以参考如下地址：
https://www.zabbix.com/documentation/4.0/manual/config/items/itemtypes/zabbix_agent/win_keys
C:\Users\king>typeperf -qx >C:\Users\king\Desktop\performance_counters.txt
在Windows中安装好Zabbix-Agent后，配置zabbix_agentd.conf，即可采集数据。

Simple Check 监控方式
simple check 监控方式支持TCP UDP VMware 的数据获取
zabbix-server主动发起请求，源地址是zabbix-server服务器的IP地址，目标地址为远程的IP地址，

Simple check支持的key
icmpping[<target>,<packets>,<interval>,<size>,<timeout>]
含义：这个key是用来ping目标IP地址是否存活的。
检测结果：0表示不存活，1表示存活。
数据类型：整数。
target：可以不用填写，可以为IP地址，也可以为DNS。
packets：表示ping多少个数据包。
interval：表示间隔多久ping一次，单位为毫秒。
size：表示包的大小，单位是字节。
timeout：表示超时时间，单位为毫秒。
举例：icmpping[,3,10]表示ping 3个包，间隔10毫秒，检测目标IP地址是否存活。

icmppingloss[<target>,<packets>,<interval>,<size>,<timeout>]
含义：这个key是用来ping目标IP地址的丢包率的。参数同icmpping。
数据类型：浮点数。
举例：icmppingloss[,3]表示ping 3个包，间隔10毫秒，检测目标IP地址的丢包率。

icmppingsec[<target>,<packets>,<interval>,<size>,<timeout>,<mode>]
含义：这个key是用来ping目标IP地址的平均响应时间的。
数据类型：浮点数。
mode：表示对ping的响应时间的计算，支持avg、max、min。其他参数同icmpping。
举例：icmppingloss[,3,,,,avg]表示ping 3个包，检测目标IP地址的平均响应时间。

net.tcp.service[service,<ip>,<port>]
含义：检测目标TCP服务的存活。
数据类型：整数。
检测结果：0表示不存活，1表示存活。
service：可以为ssh、ldap、smtp、ftp、http、pop、nntp、imap、tcp、https、telnet。
ip：表示连接service的IP地址，默认为Item的接口。
port：表示去连接service的IP地址，默认为service的标准端口。
举例：net.tcp.service[ftp]表示检测FTP是否存活。

net.tcp.service.perf[service,<ip>,<port>]
含义：检测目标TCP服务的连接响应时间。参数同net.tcp.service。
数据类型：浮点数。
检测结果：0.000000表示服务不存活。
举例：net.tcp.service.perf[ftp]表示检测FTP的连接响应时间。

net.udp.service[service,<ip>,<port>]
含义：检测目标UDP服务的存活。
数据类型：整数。
检测结果：0表示不存活，1表示存活。
service：可以为ntp。
ip：表示连接service的IP地址，默认为Item的接口。
port：表示连接service的IP地址，默认为service的标准端口。
举例：net.udp.service[ntp]表示检测NTP是否存活。

net.udp.service.perf[service,<ip>,<port>]
含义：检测目标UDP服务的连接响应时间。参数同net.udp.service。
数据类型：浮点数。
检测结果：0.000000表示服务不存活。
举例：net.udp.service.perf[ntp]表示检测NTP的连接响应时间。

关于这些key的详细说明，请参考：https://www.zabbix.com/documentation/4.0/manual/config/items/itemtypes/simple _checks

超时处理
超过zabbix_server.conf中设置的超时时间（最大超时时间为30秒）后，Zabbix会放弃处理。
ICMP ping
Zabbix 用fping处理ICMP ping请求，所以需要安装fping程序。在zabbix_server.conf中，FpingLocation参数是用于配置fping程序路径的。
由于fping默认是以root权限工作的，而Zabbix-Server是Zabbix用户运行的，所以需要对fping程序设置setuid（如果在自定义key时需要用到netstat命令，也同样要设置setuid；否则不能获取到数据，而在日志中提示权限拒绝）。

chown  root:zabbix   /usr/sbin/fping
chmod  4710   /usr/sbin/fping
日志的监控方式
zabbix-agent支持对日志文件的监控，可以对日志文件的关键字进行监控，日志监控支持普通的日志文件，也支持日志轮询，切割的文件
log[/path/to/file/file_name,<regexp>,<encoding>,<maxlines>,<mode>,<output>,<maxdelay>,<options>] 
logrt[/path/to/file/regexp_describing_filename_pattern,<regexp>,<encoding>,<maxlines>,<mode>,<output>,<maxdelay>,<options>]
log.count[/path/to/file/file_name,<regexp>,<encoding>,<maxproclines>,<mode>, <maxdelay>,<options>]
logrt.count[/path/to/file/regexp_describing_filename_pattern,<regexp>,<encoding>,<maxproclines>,<mode>,<maxdelay>,<options>]
例如，我们定义了以下的key：

log[/path/to/the/file,"large result buffer allocation.*Entries: ([0-9]+)",,,,\1]
当日志中出现以下记录时，则匹配，其中([0-9]+)会匹配到Entries后面的数值，将由“\1”输出，该key输出的数据类型为整数。该key匹配输出的是数值，而非整条日志记录。
Fr Nov 07 2019 11:07:36.6690 */ Thread Id 1400 (GLEWF) large result buffer allocation - /Length: 437136/Entries: 5948/Client Ver: >=10/RPC ID: 41726453/User: AUser/Form: CFG:ServiceLevelAgreement
[root@s-30 zabbix]# ll /var/log/secure
-rw------- 1 root root 13750 Nov  7 10:59 /var/log/secure
[root@s-30 zabbix]# chown zabbix.root /var/log/secure
[root@s-30 zabbix]# ll /var/log/secure
-rw------- 1 zabbix root 13750 Nov  7 10:59 /var/log/secure	#对于不方便设置权限的日志文件，可以使Zabbix-Agent采用root权限运行：
[root@s-30 zabbix]# vim /etc/zabbix/zabbix_agentd.conf	#AllowRoot=1  在251行添加


计算表达式的例子：
计算剩余磁盘的百分比	100*last("vfs.fs.size[/,free]",0)/last("vfs.fs.size[/,total]",0)	#就是剩余的磁盘值除以总数
计算10分钟内Zabbix values的可用大小	avg("Zabbix server:zabbix[wcache,values]",600)	
统计eth0的进出流量总和	last("net.if.in[eth0,bytes]",0)+last("net.if.out[eth0,bytes]",0)
统计进流量占网卡总流量的百分比	100*last("net.if.in[eth0,bytes]",0)/(last("net.if.in[eth0,bytes]",0)+last("net.if.out[eth0,bytes]",0))
对聚合监控方式的监控项（Aggregated[能写成中文吗？] Item）进行计算，注意引号需要转义
last("grpsum[\"video\",\"net.if.out[eth0,bytes]\",\"last\",\"0\"]",0) / last("grpsum[\"video\",\"nginx_stat.sh[active]\",\"last\",\"0\"]",0)
计算网卡的流量	last("net.if.in[ens33]",0)+last("net.if.in[ens331]",0)+last("net.if.in[ens332]",0)	#就是主机所有的网卡相加的进流量
